######################
# Tracim Config File #
######################

###
## WEB REST API specific config ##
## Rest API running pyramid framework
[pipeline:main]
pipeline = tracim_web

[app:tracim_web]
use = egg:tracim_backend

# hapic debug mode: return python traceback of error
debug = True

# pyramid config
pyramid.reload_templates = true
pyramid.debug_authorization = false
pyramid.debug_notfound = false
pyramid.debug_routematch = false
pyramid.default_locale_name = en

# pyramid_beaker parameters
session.type = file
session.data_dir = %(here)s/sessions_data
session.lock_dir = %(here)s/sessions_lock
session.key = session_key
session.secret = change_this_value_please!
session.save_accessed_time = True
session.cookie_expires = 604800
session.timeout = 604800
session.cookie_on_exception = true
# custom tracim pyramid_beaker parameter
# session.reissue_time = 120

# pyramid.includes =
#    pyramid_debugtoolbar

###
## WEBDAV server specific config ##
## webdav server (tweaked wsigdav)
[pipeline:webdav]
pipeline = tracim_webdav
[app:tracim_webdav]
use = egg:tracim_backend#webdav

###
## GENERAL TRACIM config
## These config are common for all app : REST API, Webdav, etc...
[DEFAULT]

## Database connection setting
# to set database you need a proper sqlalchemy url, some example with supported
# database (sqlite, postgresql, mysql/mariadb)
# sqlite :
sqlalchemy.url = sqlite:///%(here)s/tracim.sqlite
# mysql/mariadb :
# sqlalchemy.url = mysql+pymysql://user:password@dbhost:dbport/dbname
# postgresql :
# sqlalchemy.url = postgresql://user:paswword@dbhost:dbport/dbname?client_encoding=utf8
# see also for more info :
# https://docs.sqlalchemy.org/en/latest/core/engines.html#sqlalchemy.create_engine


### Global

## APP
# app enabled explicit list
# this allow you to explictly disable default app or enabled beta app now
# already added to default list
# This parameter is a list of app slug separated by ',' char.
# Not exhaustive list of available apps:
# - content/thread -> thread/topic/discussion : allow to discuss about one
#   subject.
# - content/file -> allow to upload all type of file like .pdf, .odt, .jpg, etc
# - content/html-document -> allow to work on a standard html-based document
#   which is editable through tracim.
# - content/folder -> allow to put content into folder.
# example of app.enabled config explicit list config:
# app.enabled = contents/thread,contents/file,contents/html-document,contents/folder

## File Depot
# file depot name
depot_storage_name = tracim
# This is where none database file will be stored.
depot_storage_dir = %(here)s/depot/

## Preview
# preview cache directory
preview_cache_dir = /tmp/tracim/preview/

# Backend API config
# Api key auth is disabled by default, you should set a not-null value
# to api.key to active it
api.key = changethisnow!
# base url of the backend API, default to same as website.base_url
# api.base_url = http://localhost:6543

## Website config
# title of website, used in email
website.title = TRACIM
# The following base_url is used for links and icons
# integrated in the email notifcations, it's the frontend config.
website.base_url = http://localhost:6543
# If config not provided, it will be extracted from website.base_url
# website.server_name = localhost

# CORS Special config
# you can override access control allowed origin here with list of comma separated
# base_url, by default only website.base_url and api.base_url are allowed
# cors.access-control-allowed-origin = http://localhost:6543,http://localhost:8090

# Auth type (internal or ldap)
auth_type = internal
# If auth_type is ldap, uncomment following ldap_* parameters
# LDAP server address
# ldap_url = ldap://localhost:389
# Base dn to make queries
# ldap_base_dn = dc=directory,dc=fsf,dc=org
# Bind dn to identify the search
# ldap_bind_dn = cn=admin,dc=directory,dc=fsf,dc=org
# The bind password
# ldap_bind_pass = toor
# Attribute name of user record who contain user login (email)
# ldap_ldap_naming_attribute = uid
# Matching between ldap attribute and ldap user field (ldap_attr1=user_field1,ldap_attr2=user_field2,...)
# ldap_user_attributes = mail=email
# TLS usage to communicate with your LDAP server
# ldap_tls = False
# If True, LDAP own tracim group managment (not available for now!)
# ldap_group_enabled = False
# User auth token validity in seconds (used to interfaces like web calendars)
user.auth_token.validity = 604800
# user reset_password token validity (default to 900s -> 15 minutes)
user.reset_password.validity = 900


### Mail
email.notification.activated = False
# shortcut for template_dir path
var_email_template_dir = %(here)s/tracim_backend/templates/mail
# email.notification.log_file_path = /tmp/mail-notifications.log
# email notifications can be sent with the user_id added as an identifier
# this way email clients like Thunderbird will be able to distinguish
# notifications generated by a user or another one
email.notification.from.email = noreply+{user_id}@trac.im
email.notification.from.default_label = Tracim Notifications
email.notification.reply_to.email = reply+{content_id}@trac.im
email.notification.references.email = thread+{content_id}@trac.im
email.notification.content_update.template.html = %(var_email_template_dir)s/content_update_body_html.mak
email.notification.content_update.template.text = %(var_email_template_dir)s/content_update_body_text.mak
email.notification.created_account.template.html = %(var_email_template_dir)s/created_account_body_html.mak
email.notification.created_account.template.text = %(var_email_template_dir)s/created_account_body_text.mak
email.notification.reset_password_request.template.html = %(var_email_template_dir)s/reset_password_body_html.mak
email.notification.reset_password_request.template.text = %(var_email_template_dir)s/reset_password_body_text.mak
# Note: items between { and } are variable names. Do not remove / rename them
email.notification.content_update.subject = [{website_title}] [{workspace_label}] {content_label} ({content_status_label})
email.notification.created_account.subject = [{website_title}] Created account
# processing_mode may be sync or async
email.notification.processing_mode = sync
email.notification.smtp.server = your_smtp_server
email.notification.smtp.port = 25
email.notification.smtp.user = your_smtp_user
email.notification.smtp.password = your_smtp_password

## Email sending configuration
# processing_mode may be sync or async,
# if async is choosen, you need also to run mail_notifier daemon
# see README for more info.
email.processing_mode = sync
# with async, please also configure redis below.
# email.async.redis.host = localhost
# email.async.redis.port = 6379
# email.async.redis.db = 0

# Email reply configuration
# Reply by email feature: allow user to answer directly to tracim in reply
# to notification.
email.reply.activated = False
email.reply.imap.server = your_imap_server
email.reply.imap.port = 993
email.reply.imap.user = your_imap_user
email.reply.imap.password = your_imap_password
email.reply.imap.folder = INBOX
email.reply.imap.use_ssl = true
email.reply.imap.use_idle = true
# Re-new connection each 10 minutes
email.reply.connection.max_lifetime = 600
# Token for communication between mail fetcher and tracim controller
email.reply.token = mysecuretoken
# Delay in seconds between each check
email.reply.check.heartbeat = 60
email.reply.use_html_parsing = true
email.reply.use_txt_parsing = true
# Lockfile path is required for email_reply feature,
# it's just an empty file use to prevent concurrent access to imap unseen mail
email.reply.lockfile_path = %(here)s/email_fetcher.lock


### Webdav

wsgidav.config_path = %(here)s/wsgidav.conf
## url can be extended like localhost/webdav
## in this case, you have to create your own proxy behind this url.
## Do not set http:// prefix.
# wsgidav.client.base_url = localhost:<WSGIDAV_PORT>

### Preview
## You can parametrized allowed jpg preview dimension list, if not set, default
## is 256x256. First {width}x{length} items is default preview dimensions.
## all items should be separated by ',' and you should be really careful to do
## set anything else than '{int}x{int}' item and ', ' separator
# preview.jpg.allowed_dims = 256x256,1000x1000
## Preview dimensions can be set as restricted, if set as restricted, access
## endpoint to  to get any other preview dimensions than allowed_dims will
## return error
# preview.jpg.restricted_dims = True

### Frontend
frontend.serve = True
# You can set dist folder of tracim frontend. by default, system
# will try to get it automatically according to tracim repository
# organisation.
# frontend.dist_folder_path = /home/user/tracim/frontend/dist

### Color
# check for color.json file in tracim, check by default in tracim parent
# dir of backend.
# you can set a specific file path here
# color.config_file_path = /home/user/tracim/color.json


[server:main]
use = egg:waitress#main
listen = localhost:6543

[alembic]
# path to migration scripts
script_location = tracim_backend/migration

# template used to generate migration files
# file_template = %%(rev)s_%%(slug)s

# timezone to use when rendering the date
# within the migration file as well as the filename.
# string value is passed to dateutil.tz.gettz()
# leave blank for localtime
# timezone =

# max length of characters to apply to the
# "slug" field
#truncate_slug_length = 40

# set to 'true' to run the environment during
# the 'revision' command, regardless of autogenerate
# revision_environment = false

# set to 'true' to allow .pyc and .pyo files without
# a source .py file to be detected as revisions in the
# versions/ directory
# sourceless = false

# version location specification; this defaults
# to migrate/versions.  When using multiple version
# directories, initial revisions must be specified with --version-path
# version_locations = %(here)s/bar %(here)s/bat migrate/versions

# the output encoding used when revision files
# are written from script.py.mako
# output_encoding = utf-8

###
# logging configuration
# https://docs.pylonsproject.org/projects/pyramid/en/latest/narr/logging.html
###

[loggers]
keys = root, tracim, sqlalchemy, alembic, hapic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = INFO
handlers = console

[logger_tracim]
level = DEBUG
handlers =
qualname = tracim

[logger_sqlalchemy]
level = INFO
handlers =
qualname = sqlalchemy.engine
# "level = INFO" logs SQL queries.
# "level = DEBUG" logs SQL queries and results.
# "level = WARN" logs neither.  (Recommended for production systems.)

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[logger_hapic]
level = DEBUG
handlers =
qualname = hapic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(asctime)s %(levelname)-5.5s [%(name)s:%(lineno)s][%(threadName)s] %(message)s
datefmt = %H:%M:%S
